# Executed scripts in Hive

# Creating Raw Data Tables
CREATE TABLE json_twitter(line string);
LOAD DATA LOCAL INPATH 'Desktop/Assign2/Twitter.json'
OVERWRITE INTO TABLE json_twitter;

# Creating Dictionary Table
CREATE TABLE worddict(word string, value int) ROW FORMAT
DELIMITED FIELDS TERMINATED BY '\t';

LOAD DATA LOCAL INPATH 'Desktop/Assign2/Dictionary.txt'
OVERWRITE INTO TABLE worddict;

# Creating Formatted Table with Data
CREATE TABLE twitterdata (tweetid bigint,userid bigint, dt_mod string,
username string, name string,location string,followers_count int,text string)
ROW FORMAT DELIMITED FIELDS TERMINATED BY ',';

INSERT INTO twitterdata SELECT tweetid, userid, dt_mod, name, username,
location, followers_count, text FROM json_twitter a lateral view json_tuple
(a.line, 'id', 'created_at', 'user', 'text') b as tweetid, dt_mod, user, text
lateral view json_tuple (b.user,'id', 'name', 'screen_name', 'location',
'followers_count') c as userid, username, name, location, followers_count;

# Reformat Data in Table
CREATE TABLE twitterfinal AS SELECT tweetid, userid, from_unixtime(
unix_timestamp(dt_mod,"EEE MMM d HH:mm:ss Z yyyy"),'yyyy-MM-dd')  as date,
username, name, location, followers_count, text FROM twitterdata;

# Queries
# Count of Hashtag
SELECT hashtag, count(*) FROM twitterfinal lateral view explode(split(text,' '))
b as hashtag WHERE hashtag RLIKE '#[a-zA-Z0-9]' GROUP BY hashtag;

# Most Trending Hashtag in a Day and its Count
SELECT date, hashtag, count(*) CNT FROM twitterfinal lateral view
explode(split(text,' ')) b as hashtag WHERE hashtag RLIKE '#[a-zA-Z0-9]'
GROUP BY date, hashtag ORDER BY CNT LIMIT 5;

# State with Most Active Users and Number of Tweets Posted
SELECT location, count(tweetid) AS cnt FROM twitterfinal GROUP BY location
ORDER BY cnt DESC LIMIT 1;

# Top 10 Users Based on User's Follower Count
SELECT DISTINCT userid, username, followers_count FROM twitterfinal
ORDER BY followers_count DESC LIMIT 10;

# Score the Sentiment of Tweets Posted
CREATE TABLE tweetwords2 AS SELECT tw.tweetid, tw.userid, tw.username, tw.date,
b.word FROM twitterfinal tw lateral view explode(split(text,' ')) b as word;

CREATE TABLE score2 AS SELECT tw.tweetid, tw.userid, tw.username, tw.date,
sum(wd.value) Score FROM tweetwords2 tw JOIN worddict wd ON lower(tw.word)
= wd.word GROUP BY tw.tweetid, tw.userid,  tw.username, tw.date;

SELECT tweetid, userid, username, date, score, CASE WHEN Score < 0 THEN
'negative' WHEN Score = 0 THEN 'neutral' WHEN Score > 0 THEN 'positive' END
AS Sentiment FROM score2;
